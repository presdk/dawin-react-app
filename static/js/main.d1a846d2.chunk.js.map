{"version":3,"sources":["assets/avatar.jpg","api/TumblrApi.js","actions/posts.js","pages/PicturePostPage.jsx","components/DynamicTimeText.jsx","components/ButtonBorder.jsx","components/FixedFooter.jsx","components/MainHeader.jsx","reducers/index.js","pages/BlogPage.jsx","animations/Fade.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","BlogUrl","client","Tumblr","createClient","consumer_key","consumer_secret","token","token_secret","startLoadingPosts","postType","type","addPosts","posts","addedPosts","failedToLoadPosts","getColumns","containerWidth","columns","PicturePostPage","props","useState","isLoadingPosts","setIsLoadingPosts","photoPosts","useSelector","state","shallowEqual","hasMorePosts","dispatch","useDispatch","showMorePosts","limit","offset","callback","blogPosts","npf","err","response","GetPhotoPosts","length","retrievedPosts","useEffect","OnShowMorePosts","useCallback","images","map","post","highResPhoto","content","media","src","url","key","id_string","width","height","pageStart","loadMore","hasMore","style","overflow","photos","direction","margin","DynamicTimeText","displayTime","setDisplayTime","updateTime","newDisplayTime","Date","toLocaleString","hour","minute","hour12","onTimerTick","setInterval","clearTimeout","StyledButtonBorder","styled","div","ButtonBorder","children","StyledFixedFooter","footer","FixedFooter","role","CircleImage","img","MainHeader","className","backgroundColor","AvatarImage","fontSize","defaultState","createPostsWithPostType","action","combineReducers","textPosts","htmlToReactParser","HtmlToReactParser","require","Parser","StyledBlogPage","BlogPage","GetTextPosts","filter","title","id","emojifiedTitle","includes","splitIndex","indexOf","emojiKey","substring","titleText","trim","emoji","toUpperCase","getEmojifiedTitle","htmlContent","parse","body","Accordion","Card","Toggle","textAlign","eventKey","Collapse","Body","StyledFade","delay","Fade","StyledApp","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","galleryLinkText","blogLinkText","App","basename","process","Container","fluid","Row","Col","Navbar","variant","bg","sticky","Brand","href","to","Nav","Link","as","md","span","ListGroup","Item","xs","exact","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1a846d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.d1518969.jpg\";","import Tumblr from \"tumblr.js\";\n\nconst BlogUrl = \"ourworldsimplified.tumblr.com\";\n\nconst client = Tumblr.createClient({\n  consumer_key: \"E1hJlILUB7qLnxQJc2qBkMRYEsEtxDvNKrOprAirWAYwk25IV2\",\n  consumer_secret: \"SKBXUfOpSoeF5vMlaWBTG7S2NzMyaZGbSNge2y6wW39BJzfj7k\",\n  token: \"yhlsrkfax4VEP9MpQKmL8y4hSZAXJ3iJMGI0zqPv7LVTyihcwZ\",\n  token_secret: \"1Nztj0BBaUTLsI1W4WvB4GXj2GTJbLXKvLZhgDCsp4m66p3aVB\",\n});\n\nexport const GetPhotoPosts = (limit = 20, offset, callback) => {\n  client.blogPosts(\n    BlogUrl,\n    { type: \"photo\", limit: limit, offset: offset, npf: true },\n    (err, response) => {\n      callback(response.posts);\n    }\n  );\n};\n\nexport const GetTextPosts = (limit = 20, offset, callback) => {\n  client.blogPosts(\n    BlogUrl,\n    { type: \"text\", limit: limit, offset: offset },\n    (err, response) => {\n      callback(response.posts);\n    }\n  );\n};","export const startLoadingPosts = (postType) => ({\n  postType: postType,\n  type: \"START_LOADING_POSTS\",\n});\n\nexport const addPosts = (postType, posts) => ({\n  postType: postType,\n  addedPosts: posts,\n  type: \"ADDED_POSTS\",\n});\n\nexport const failedToLoadPosts = (postType) => ({\n  postType: postType,\n  type: \"FAILED_LOADING_POSTS\",\n});\n","import styled from \"styled-components\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { GetPhotoPosts } from \"../api/TumblrApi\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport Gallery from \"react-photo-gallery\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport {\n  failedToLoadPosts,\n  startLoadingPosts,\n  addPosts,\n} from \"../actions/posts\";\n\nfunction getColumns(containerWidth) {\n  let columns = 1;\n  if (containerWidth >= 500) {\n    columns = 2;\n  }\n  return columns;\n}\n\nconst PicturePostPage = (props) => {\n  const NumPostsPerPage = 20;\n\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const photoPosts = useSelector(\n    (state) => state.photoPosts.posts,\n    shallowEqual\n  );\n  const hasMorePosts = useSelector((state) => state.photoPosts.hasMorePosts);\n\n  const dispatch = useDispatch();\n  const showMorePosts = () => {\n    dispatch(startLoadingPosts(\"photo\"));\n\n    GetPhotoPosts(NumPostsPerPage, photoPosts.length, (retrievedPosts) => {\n      if (retrievedPosts && retrievedPosts.length > 0) {\n        dispatch(addPosts(\"photo\", retrievedPosts));\n        setIsLoadingPosts(false);\n      } else {\n        dispatch(failedToLoadPosts(\"photo\"));\n      }\n    });\n  };\n\n  useEffect(() => {\n    OnShowMorePosts();\n  }, [photoPosts]);\n\n  const OnShowMorePosts = useCallback(() => {\n    if (isLoadingPosts) {\n      return;\n    }\n    setIsLoadingPosts(true);\n    showMorePosts();\n  }, [isLoadingPosts]);\n\n  if (photoPosts.length <= 0) {\n    return <div>Loading...</div>;\n  }\n\n  const images = photoPosts\n    .map((post) => {\n      const highResPhoto = post.content[0].media[0];\n\n      return {\n        src: highResPhoto.url,\n        key: post.id_string,\n        width: highResPhoto.width,\n        height: highResPhoto.height,\n      };\n    });\n\n  return (\n    <InfiniteScroll\n      {...props}\n      pageStart={0}\n      loadMore={OnShowMorePosts}\n      hasMore={hasMorePosts}\n      style={{ overflow: \"hidden\" }}\n    >\n      <Gallery\n        photos={images}\n        direction=\"column\"\n        margin={6}\n        columns={getColumns}\n      />\n    </InfiniteScroll>\n  );\n};\n\nexport default PicturePostPage;\n","import React, { useEffect, useState } from \"react\";\n\nconst OneMinuteInMillis = 60000;\n\nconst DynamicTimeText = (props) => {\n  const [displayTime, setDisplayTime] = useState(null);\n\n  const updateTime = () => {\n    let now = new Date();\n    let newDisplayTime = now.toLocaleString(\"en-NZ\", {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true,\n    });\n    setDisplayTime(newDisplayTime);\n  };\n\n  useEffect(() => {\n    updateTime();\n\n    const onTimerTick = setInterval(() => {\n      updateTime();\n    }, OneMinuteInMillis);\n\n    return () => {\n      clearTimeout(onTimerTick);\n    };\n  }, []);\n\n  return <span>{displayTime}</span>;\n};\n\nexport default DynamicTimeText;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButtonBorder = styled.div`\n  border-style: solid;\n  border-width: thin;\n  box-shadow: -0.5px -1px 0px 1px grey;\n  padding: 2px;\n`;\n\nconst ButtonBorder = ({ children }) => {\n  return <StyledButtonBorder>{children}</StyledButtonBorder>;\n};\n\nexport default ButtonBorder;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport DynamicTimeText from \"../components/DynamicTimeText\";\nimport ButtonBorder from \"./ButtonBorder\";\nimport Theme from \"../Theme\";\n\nconst StyledFixedFooter = styled.footer`\n  display: flex;\n  flex-direction: row;\n  align-items: baseline;\n  justify-content: left;\n  background-color: white;\n  padding: 2px;\n  > img,\n  div {\n    margin: 2px 4px;\n  }\n`;\n\nconst FixedFooter = (props) => {\n  return (\n    <StyledFixedFooter {...props}>\n      <ButtonBorder>\n        <DynamicTimeText />\n      </ButtonBorder>\n      <span role=\"img\">🎹</span>\n    </StyledFixedFooter>\n  );\n};\n\nexport default FixedFooter;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport AvatarImage from \"../assets/avatar.jpg\";\n\nconst CircleImage = styled.img`\n  clip-path: circle(50px at center);\n  width: 100px;\n  height: 100px;\n`;\n\nconst MainHeader = (props) => {\n  return (\n    <div {...props} className=\"text-center pt-3\" style={{backgroundColor:\"white\"}}>\n        <CircleImage src={AvatarImage} />\n      <p className=\"mt-3 pb-3\" style={{fontSize: \"1.25rem\"}}>DAOON</p>\n    </div>\n  );\n};\n\nexport default MainHeader;\n","import { combineReducers } from \"redux\";\n\nconst defaultState = {\n  posts: [],\n  hasMorePosts: true,\n};\n\nconst createPostsWithPostType = (postType = \"\") => {\n  return (state = defaultState, action) => {\n    if (action.postType !== postType) {\n      return state;\n    }\n\n    switch (action.type) {\n      case \"START_LOADING_POSTS\":\n        return {\n          ...state,\n        };\n      case \"ADDED_POSTS\":\n        return {\n          ...state,\n          posts: [...state.posts, ...action.addedPosts],\n        };\n      case \"FAILED_LOADING_POSTS\":\n        return {\n          ...state,\n          hasMorePosts: false,\n        };\n      default:\n        return state;\n    }\n  };\n};\n\nexport default combineReducers({\n  photoPosts: createPostsWithPostType(\"photo\"),\n  textPosts: createPostsWithPostType(\"text\"),\n});\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { GetTextPosts } from \"../api/TumblrApi\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport {\n  failedToLoadPosts,\n  startLoadingPosts,\n  addPosts,\n} from \"../actions/posts\";\nimport styled from \"styled-components\";\nimport { Accordion, Card } from \"react-bootstrap\";\nconst HtmlToReactParser = require(\"html-to-react\").Parser;\nconst htmlToReactParser = new HtmlToReactParser();\n\nconst StyledBlogPage = styled.div`\n  a {\n    color: #6240b8;\n  }\n  a:hover {\n    text-decoration-line: underline !important;\n  }\n`;\n\nconst getEmojifiedTitle = (title) => {\n  if (!(title.includes('[') || title.includes(']'))) {\n    return title;\n  }\n\n  const splitIndex = title.indexOf(']');\n  if (splitIndex == -1) {\n    return title;\n  }\n\n  const emojiKey = title.substring(0, splitIndex + 1);\n  const titleText = title.substring(splitIndex + 1).trim();\n\n  let emoji = \"\";\n  switch (emojiKey) {\n    case \"[Dev]\":\n      emoji = \"💾 Dev\";\n      break;\n    case \"[Invest]\":\n      emoji = \"📈 Invest\";\n      break;\n    case \"[Video editing]\":\n      emoji = \"📷 Editing\";\n      break;\n    case \"[Curious]\":\n      emoji = \"💭 Curious\";\n      break;\n  }\n\n  return emoji.length > 0 ?\n    `${emoji.toUpperCase()} - ${titleText}` : titleText;\n};\n\nconst BlogPage = (props) => {\n  const NumPostsPerPage = 20;\n\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const textPosts = useSelector((state) => state.textPosts.posts, shallowEqual);\n  const hasMorePosts = useSelector((state) => state.textPosts.hasMorePosts);\n\n  const dispatch = useDispatch();\n  const showMorePosts = () => {\n    dispatch(startLoadingPosts(\"text\"));\n\n    GetTextPosts(NumPostsPerPage, textPosts.length, (retrievedPosts) => {\n      if (retrievedPosts && retrievedPosts.length > 0) {\n        dispatch(addPosts(\"text\", retrievedPosts));\n        setIsLoadingPosts(false);\n      } else {\n        dispatch(failedToLoadPosts(\"text\"));\n      }\n    });\n  };\n\n  useEffect(() => {\n    OnShowMorePosts();\n  }, [textPosts]);\n\n  const OnShowMorePosts = useCallback(() => {\n    if (isLoadingPosts) {\n      return;\n    }\n    setIsLoadingPosts(true);\n    showMorePosts();\n  }, [isLoadingPosts]);\n\n  if (textPosts.length <= 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <StyledBlogPage>\n      <InfiniteScroll\n        {...props}\n        pageStart={0}\n        loadMore={OnShowMorePosts}\n        hasMore={hasMorePosts}\n        className=\"mt-3\"\n        style={{ overflow: \"hidden\" }}\n      >\n        {textPosts.filter(post => post.title).map((post) => {\n          // Show posts with valid titles\n          const { id } = post;\n          const emojifiedTitle = getEmojifiedTitle(post.title);\n          const htmlContent = htmlToReactParser.parse(post.body);\n\n          return (\n            <div className=\"mt-2 mb-2\">\n              <Accordion>\n                <Card>\n                  <Accordion.Toggle style={{ textAlign: \"left\" }} eventKey={id}>\n                    {emojifiedTitle}\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey={id}>\n                    <Card.Body>{htmlContent}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </div>\n          );\n        })}\n      </InfiniteScroll>\n    </StyledBlogPage>\n  );\n};\n\nexport default BlogPage;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledFade = styled.div`\n  animation: fadeIn ease ${props => props.delay | 1}s;\n\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`;\n\nconst Fade = (props) => {\n  return (\n    <StyledFade {...props}>\n      {props.children}\n    </StyledFade>\n  );\n};\n\nexport default Fade;\n","import React from \"react\";\nimport \"./App.css\";\nimport PicturePostPage from \"./pages/PicturePostPage\";\nimport FixedFooter from \"./components/FixedFooter\";\nimport MainHeader from \"./components/MainHeader\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { Container, Row, Col, ListGroup, Navbar, Nav } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n} from \"react-router-dom\";\nimport BlogPage from \"./pages/BlogPage\";\nimport Fade from \"./animations/Fade\";\nimport styled from \"styled-components\";\n\nconst StyledApp = styled.div`\n  * {\n    color: black;\n    font-family: \"Roboto\", sans-serif;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5 {\n    font-family: \"Noto Sans JP\", sans-serif;\n  }\n\n  a:hover {\n    text-decoration-line: none;\n  }\n`;\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconst galleryLink = \"/gallery\";\nconst galleryLinkText = <span> 🖼️Gallery </span>;\n\nconst blogLink = \"/blog\";\nconst blogLinkText = <span> 📒Blog </span>;\n\nconst App = () => {\n  return (<Router basename={process.env.PUBLIC_URL}>\n    <Provider store={store} >\n      <StyledApp >\n        <Container fluid >\n          <Row className=\"sticky-top\" >\n            <Col className=\"d-xs-block d-sm-none col-xs-12\" >\n              <Navbar variant=\"light\"\n                bg=\"white\"\n                sticky=\"top\" >\n                <Navbar.Brand href=\"#\">Daoon</Navbar.Brand>\n                <Link to={galleryLink} >\n                  <Nav.Link as=\"div\"> {galleryLinkText}\n                  </Nav.Link>\n                </Link>\n                <Link to={blogLink}>\n                  <Nav.Link as=\"div\" > {blogLinkText} </Nav.Link>\n                </Link>\n              </Navbar>\n            </Col>\n          </Row>\n          <Row >\n            <Col md={\n              { span: 2, offset: 2 }}\n              className=\"text-center d-none d-md-block\" >\n              <Fade className=\"sticky-top\" >\n                <MainHeader />\n                <ListGroup variant=\"flush\" >\n                  <ListGroup.Item >\n                    <Link to={galleryLink} > {galleryLinkText} </Link>\n                  </ListGroup.Item>\n                  <ListGroup.Item >\n                    <Link as=\"li\" to={blogLink} > {blogLinkText} </Link>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Fade>\n            </Col>\n            <Col xs={12} md={{ span: 6 }}>\n              <Switch>\n                <Route exact path=\"/\" render={() => < Redirect to=\"/gallery\" />} />\n                <Route path=\"/gallery\" >\n                  <PicturePostPage />\n                </Route>\n                <Route path=\"/blog\" >\n                  <BlogPage />\n                </Route>\n              </Switch>\n            </Col>\n          </Row>\n          <Row >\n            <Col >\n              <FixedFooter className=\"fixed-bottom\" />\n            </Col>\n          </Row>\n        </Container>\n      </StyledApp>\n    </Provider>\n  </Router>\n\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}